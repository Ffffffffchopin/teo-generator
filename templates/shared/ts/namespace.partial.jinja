{%- for e in outline.enums() %}
/// ## {{ e.title() }}
///
/// {{ e.desc }}
export enum {{ e.name() }} {
{%- for m in e.members() %}
    /// ### {{ m.title() }}
    ///
    /// {{ m.desc() }}
    {{ m.name() }} = "{{ m.name() }}",
{%- endfor %}
}
{%- endfor %}

{% for interface in outline.interfaces() %}
/**
 * **{{ interface.title() }}**
 *
 * {{ interface.desc() }}
 */
export type {{ interface.name() }}{{ interface.generics_declaration() }} = {{ ts_extends(interface.extends()) }}{
    {% for field in interface.fields() %}
    /**
     * **{{ field.title() }}**
     *
     * {{ field.desc() }}
     */
     {{ field.name() }}{%- if field.type().is_optional() -%}?{%- endif -%}: {{ lookup(field.type().unwrap_optional(), false).unwrap() }}
    {% endfor %}
}
{%- if interface.is_output_result() %}
export type {{ interface.name() }}GetPayload<S extends boolean | null | undefined | {{ interface.model_name() }}Args, U = keyof S> = S extends true
    ? {{ interface.name() }}
    : S extends undefined
        ? never
        : S extends {{ interface.model_name() }}Args | {{ interface.model_name() }}FindManyArgs
            ? 'include' extends U
                ? SelectSubset<{{ interface.model_name() }}, S> & {
                    [P in ExistKeys<S['include']>]:
                    {%- for field in interface.fields() %}
                        {%- if field.is_relation() %}
                        P extends '{{ field.name()|camelcase }}' ? {{ lookup(field.type().unwrap_optional().unwrap_array().unwrap_optional(), false).unwrap() }}GetPayload<S['include'][P]>{{ get_payload_suffix(field.type()) }} :
                        {%- endif %}
                    {%- endfor %}
                    never
                }
                : SelectSubset<{{ interface.name() }}, S>
            : {{ interface.name() }}
    {%- endif %}
{% endfor %}

{% for ns in namespace.namespaces.values() %}
{{ render_namespace(ns, conf, main_namespace, mode.clone()) }}
{% endfor %}

{% if conf.is_client() %}
{% for delegate in outline.delegates() %}
export interface {{ delegate.name_with_conf(conf.class_name().to_string()) }} {

    {% for request_item in delegate.request_items() %}
    {{ request_item.name() }}<T extends {{ lookup(request_item.input_type().unwrap_optional(), false).unwrap() }}>({%- if request_item.has_custom_url_args() -%}pathArgs: {[key: string]: string}, {%- endif -%}{%- if request_item.has_body_input() -%}body: {%- if request_item.is_form() -%}FormData{%- else -%}T{%- endif -%}, {%- endif -%}headers?: {[key: string]: string} | undefined, queryString?: string | undefined): Promise<{{ lookup(request_item.output_type().unwrap_optional(), true).unwrap() }}>
    {% endfor %}

    {% for namespace_item in delegate.namespace_items() %}
    {{ namespace_item.property_name() }}: {{ namespace_item.path().join(".") }}
    {% endfor %}

    {% for group_item in delegate.group_items() %}
    {{ group_item.property_name() }}: {{ group_item.path().join(".") }}
    {% endfor %}

    /**
     * Get a new client altered with `headers`.
     * @param {headers?} headers - The new headers.
     */
    $headers(headers?: {[key: string]: string} | undefined): {{ conf.class_name().to_string() }}
}
{% endfor %}

{% if namespace.path().is_empty() %}
/**
 * ## {{ conf.class_name().to_string() }} API Client
 *
 * {{ conf.class_name().to_string() }} API client for TypeScript & javaScript. It supports both browser and
 * node.js. It's generated by the fantastic Teo framework.
 *
 */
export const {{ conf.object_name().to_string() }}: {{ conf.class_name().to_string() }}
{% endif %}
{%- endif %}

{% if conf.is_entity() %}
{% for model in namespace.models.values() %}
{%- if model.generate_entity %}
export class {{ model.name() }}Model {
    async findMany(query: {{ model.name() }}FindManyArgs): Promise<{{ model.name() }}[]>
    async findUnique(query: {{ model.name() }}FindUniqueArgs): Promise<{{ model.name() }} | null>
    async findFirst(query: {{ model.name() }}FindManyArgs): Promise<{{ model.name() }} | null>
    async create(input?: {{ model.name() }}CreateInput): Promise<{{ model.name() }}>
}

export class {{ model.name() }} {
    get isNew(): boolean
    get isModified(): boolean
    async set(input: {{ model.name() }}UpdateInput): Promise<void>
    async update(input: {{ model.name() }}ScalarUpdateInput): Promise<void>
    async save(): Promise<void>
    async delete(): Promise<void>
    async toTeon(): Promise<{{ model.name() }}Result>
    {%- for field in model.fields.values() %}
    /// ## {{ field.title() }}
    ///
    /// {{ field.desc() }}
    get {{ field.name() }}(): {{ optional_strategy(lookup(field.type(), false)?) }}

    /// ## {{ field.title() }}
    ///
    /// {{ field.desc() }}
    set {{ field.name() }}(newValue: {{ optional_strategy(lookup(field.type(), false)?) }}): void
    {%- endfor %}
    {%- for field in model.relations.values() %}
    {%- if field.type().is_array() %}
    get {{ field.name() }}(): Promise<{{ optional_strategy(lookup(field.type(), false)?) }}>
    set{{ field.name()|pascalcase}}(newValue: {{ optional_strategy(lookup(field.type(), false)?) }}): Promise<void>
    addTo{{ field.name()|pascalcase}}(newValue: {{ optional_strategy(lookup(field.type(), false)?) }}): Promise<void>
    removeFrom{{ field.name()|pascalcase}}(newValue: {{ optional_strategy(lookup(field.type(), false)?) }}): Promise<void>
    {%- else %}
    get {{ field.name() }}(): Promise<{{ optional_strategy(lookup(field.type(), false)?) }}>
    set{{ field.name()|pascalcase}}(newValue: {{ optional_strategy(lookup(field.type(), false)?) }}): Promise<void>
    {%- endif %}
    {%- endfor %}
    {%- for field in model.properties.values() %}
    {%- if field.getter.is_some() %}
    get {{ field.name() }}(): Promise<{{ optional_strategy(lookup(field.type(), false)?) }}>
    {%- endif %}
    {%- if field.setter.is_some() %}
    set{{ field.name()|pascalcase }}(newValue: {{ optional_strategy(lookup(field.type(), false)?) }}): Promise<void>
    {%- endif %}
    {%- endfor %}
}
{% endif %}
{% endfor %}
{% for path_arguments in outline.path_arguments() %}
type {{ path_arguments.name() }} = {
{% for item in path_arguments.items() %}
    {{ item }}: string
{% endfor %}
}
{% endfor %}
{%- if !namespace.is_std() %}
type {% if namespace.is_main() %}Teo{% else %}{{ namespace.name()|capitalize }}Namespace{% endif %} = {
    private constructor(): never
{% if namespace.is_main() %}
    async transaction(callback: (teo: Teo) => Promise<void>): Promise<void>
{% endif %}
{%- for model in namespace.models.values() %}
    get {{ model.name()|camelcase }}(): {{ model.name() }}Model
{%- endfor %}

{%- for child in namespace.namespaces.values() %}
{%- if !child.is_std() %}
    get {{ child.name() }}(): {{ child.name()|pascalcase }}Namespace
{%- endif %}
{%- endfor %}
}
{%- endif %}
{% endif %}