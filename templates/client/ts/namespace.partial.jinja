{% for e in outline.enums %}
    /**
     * ## {{ e.title }}
     *
     * {{ e.desc }}
     */
    export type {{ e.name }} = {{ class.joined_enum_variant_names_for_ts() }}
{% endfor %}

{% for interface in outline.interfaces %}
/**
 * **{{ interface.title }}**
 *
 * {{ interface.desc }}
 */
export type {{ interface.name }}{{ interface.generics_declaration() }} = {
    {% for field in interface.fields %}
    /**
     * **{{ field.title }}**
     *
     * {{ field.desc }}
     */
     {{ field.name }}{%- if field.type.is_optional() -%}?{%- endif -%}: {{ lookup(field.type.unwrap_optional()) }}
    {% endfor %}
}
{%- if interface.is_output_result() %}
export type {{ interface.name }}GetPayload<S extends boolean | null | undefined | {{ class.model_name }}Args, U = keyof S> = S extends true
    ? {{ class.model_name }}
    : S extends undefined
        ? never
        : S extends {{ interface.model_name() }}Args | {{ interface.model_name() }}FindManyArgs
            ? 'include' extends U
                ? SelectSubset<{{ interface.model_name() }}, S> & {
                    [P in ExistKeys<S['include']>]:
                    {%- for field in interface.fields %}
                        {%- if field.kind.is_relation() %}
                        P extends '{{ field.name|camelcase }}' ? {{ field.field_type }}GetPayload<S['include'][P]> :
                        {%- endif %}
                    {%- endfor %}
                    never
                }
                : SelectSubset<{{ interface.model_name() }}, S>
            : {{ interface.model_name() }}
    {%- endif %}
{% endfor %}
