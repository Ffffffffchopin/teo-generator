from typing import Any, Optional, Literal, TypedDict, Generics
from re import Pattern
from datetime import date, datetime
from decimal import Decimal
from teo import ObjectId
{%- for child in namespace.namespaces.values() %}
from . import {{ child.name()|snakecase }}
{%- endfor %}

{% for e in outline.enums() %}
{{ e.name() }} = Literal[{{ e.joined_enum_variant_names_for_python() }}]
{% endfor %}


{% for interface in outline.interfaces() %}
# **{{ interface.title() }}**
#
# {{ interface.desc() }}
{% for name in interface.generic_names() %}
{{ name }} = TypeVar('{{ name }}')
{% endfor %}
{{ interface.name() }} = TypedDict("{{ interface.name() }}", {
{% for field in interface.fields() %}
    # **{{ field.title() }}**
    #
    # {{ field.desc() }}
    "{{ field.name()|snakecase_preserve_where_operator }}": {{ lookup.call(field.type()).unwrap() }},
{% endfor %}
}, {% if interface.generic_names().len() > 0 %}, Generic[{{interface.joined_generic_names()}}]{% endif %}{% for t in interface.extends() %}, {{ lookup.call(t).unwrap() }}{% endfor %})
{% endfor %}