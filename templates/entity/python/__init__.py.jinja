from __future__ import annotations
from typing import Any, Optional, Literal, TypedDict, Generic, TypeVar
from re import Pattern
from datetime import date, datetime
from decimal import Decimal
from teo import ObjectId, Enumerable

{%- for child in namespace.namespaces.values() %}
from . import {{ child.name()|snakecase }}
{%- endfor %}

{% for e in outline.enums() %}
{{ e.name() }} = Literal[{{ e.joined_enum_variant_names_for_python() }}]
{% endfor %}


{% for interface in outline.interfaces() %}
# **{{ interface.title() }}**
#
# {{ interface.desc() }}
class {{ interface.name() }}{% if interface.generic_names().len() > 0 %}[{{interface.joined_generic_names()}}]{% endif %}({% for t in interface.extends() %}{{ lookup.call(t).unwrap() }}, {% endfor %}TypedDict):
{% if interface.fields().is_empty() %}
    pass
{% endif %}
{% for field in interface.fields() %}
    # **{{ field.title() }}**
    #
    # {{ field.desc() }}
    {{ field.name()|snakecase_preserve_where_operator|escape_python }}: {{ lookup.call(field.type()).unwrap() }}
{% endfor %}
{% endfor %}
