use std::path::Path;
use inflector::Inflector;
use serde_json::{json, Value};

pub(crate) fn generate_package_json(path: &Path) -> String {
    let name = path.file_name().unwrap().to_str().unwrap().to_kebab_case();
    let version = "0.1.0";
    let json = json!({
        "name": name,
        "version": version,
        "private": true,
        "description": "This package is generated by TEO.",
        "main": "src/index.js",
        "types": "src/index.d.ts",
        "type": "module",
        "files": ["src/**/*"],
        "dependencies": {
            "decimal.js": "^10.4.3"
        },
        "devDependencies": {
            "ts-node": "^10.9.2",
            "typescript": "^5.3.3"
        }
    });
    serde_json::to_string_pretty(&json).unwrap() + "\n"
}

pub(crate) fn updated_package_json_for_existing_project(content: String) -> String {
    let mut json_value: Value = serde_json::from_str(&content).unwrap();
    if let Some(dependencies) = json_value.get_mut("dependencies") {
        if dependencies.get("decimal.js").is_none() {
            dependencies.as_object_mut().unwrap().insert("decimal.js".to_owned(), Value::String("^10.4.3".to_owned()));
        }
    } else {
        json_value.as_object_mut().unwrap().insert("dependencies".to_owned(), json!({
            "decimal.js": "^10.4.3"
        }));
    }
    serde_json::to_string_pretty(&json_value).unwrap() + "\n"
}

pub(crate) fn update_package_json(content: String) -> String {
    let mut json_value: Value = serde_json::from_str(&content).unwrap();
    let version = json_value.get("version");
    match version {
        Some(v) => {
            let previous = v.as_str().unwrap();
            let parts = previous.split(".");
            let last = parts.clone().last().unwrap();
            match last.parse::<u32>() {
                Ok(num) => {
                    let new_last = format!("{}", num + 1);
                    let vec_parts: Vec<&str> = parts.into_iter().collect();
                    let new_version = vec_parts.split_last().unwrap().1.join(".") + "." + &new_last;
                    json_value.as_object_mut().unwrap().insert("version".to_owned(), Value::String(new_version));
                },
                Err(_) => (),
            }
        },
        None => {
            json_value.as_object_mut().unwrap().insert("version".to_owned(), Value::String("0.1.1".to_owned()));
        },
    }
    serde_json::to_string_pretty(&json_value).unwrap() + "\n"
}
