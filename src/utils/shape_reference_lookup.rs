use inflector::Inflector;
use teo_result::Result;
use teo_parser::r#type::shape_reference::ShapeReference;
use crate::utils::lookup::Lookup;

pub(crate) fn shape_reference_lookup(
    shape_reference: &ShapeReference,
    lookup: &'static dyn Lookup,
    path_separator: &str,
    open_generics: &str,
    close_generics: &str,
) -> Result<String> {
    Ok(match shape_reference {
        ShapeReference::BoolFilter => "BoolFilter".to_owned(),
        ShapeReference::BoolNullableFilter => "BoolNullableFilter".to_owned(),
        ShapeReference::IntFilter => "IntFilter".to_owned(),
        ShapeReference::IntNullableFilter => "IntNullableFilter".to_owned(),
        ShapeReference::Int64Filter => "Int64Filter".to_owned(),
        ShapeReference::Int64NullableFilter => "Int64NullableFilter".to_owned(),
        ShapeReference::Float32Filter => "Float32Filter".to_owned(),
        ShapeReference::Float32NullableFilter => "Float32NullableFilter".to_owned(),
        ShapeReference::FloatFilter => "FloatFilter".to_owned(),
        ShapeReference::FloatNullableFilter => "FloatNullableFilter".to_owned(),
        ShapeReference::DecimalFilter => "DecimalFilter".to_owned(),
        ShapeReference::DecimalNullableFilter => "DecimalNullableFilter".to_owned(),
        ShapeReference::DateFilter => "DateFilter".to_owned(),
        ShapeReference::DateNullableFilter => "DateNullableFilter".to_owned(),
        ShapeReference::DateTimeFilter => "DateTimeFilter".to_owned(),
        ShapeReference::DateTimeNullableFilter => "DateTimeNullableFilter".to_owned(),
        ShapeReference::ObjectIdFilter => "ObjectIdFilter".to_owned(),
        ShapeReference::ObjectIdNullableFilter => "ObjectIdNullableFilter".to_owned(),
        ShapeReference::StringFilter => "StringFilter".to_owned(),
        ShapeReference::StringNullableFilter => "StringNullableFilter".to_owned(),
        ShapeReference::EnumFilter(t) => format!("EnumFilter{open_generics}{}{close_generics}", lookup.call(t.as_ref())?),
        ShapeReference::EnumNullableFilter(t) => format!("EnumNullableFilter{open_generics}{}{close_generics}", lookup.call(t.as_ref())?),
        ShapeReference::ArrayFilter(t) => format!("ArrayFilter{open_generics}{}{close_generics}", lookup.call(t.as_ref())?),
        ShapeReference::ArrayNullableFilter(t) => format!("ArrayNullableFilter{open_generics}{}{close_generics}", lookup.call(t.as_ref())?),
        ShapeReference::BoolWithAggregatesFilter => "BoolWithAggregatesFilter".to_owned(),
        ShapeReference::BoolNullableWithAggregatesFilter => "BoolNullableWithAggregatesFilter".to_owned(),
        ShapeReference::IntWithAggregatesFilter => "IntWithAggregatesFilter".to_owned(),
        ShapeReference::IntNullableWithAggregatesFilter => "IntNullableWithAggregatesFilter".to_owned(),
        ShapeReference::Int64WithAggregatesFilter => "Int64WithAggregatesFilter".to_owned(),
        ShapeReference::Int64NullableWithAggregatesFilter => "Int64NullableWithAggregatesFilter".to_owned(),
        ShapeReference::Float32WithAggregatesFilter => "Float32WithAggregatesFilter".to_owned(),
        ShapeReference::Float32NullableWithAggregatesFilter => "Float32NullableWithAggregatesFilter".to_owned(),
        ShapeReference::FloatWithAggregatesFilter => "FloatWithAggregatesFilter".to_owned(),
        ShapeReference::FloatNullableWithAggregatesFilter => "FloatNullableWithAggregatesFilter".to_owned(),
        ShapeReference::DecimalWithAggregatesFilter => "DecimalWithAggregatesFilter".to_owned(),
        ShapeReference::DecimalNullableWithAggregatesFilter => "DecimalNullableWithAggregatesFilter".to_owned(),
        ShapeReference::DateWithAggregatesFilter => "DateWithAggregatesFilter".to_owned(),
        ShapeReference::DateNullableWithAggregatesFilter => "DateNullableWithAggregatesFilter".to_owned(),
        ShapeReference::DateTimeWithAggregatesFilter => "DateTimeWithAggregatesFilter".to_owned(),
        ShapeReference::DateTimeNullableWithAggregatesFilter => "DateTimeNullableWithAggregatesFilter".to_owned(),
        ShapeReference::ObjectIdWithAggregatesFilter => "ObjectIdWithAggregatesFilter".to_owned(),
        ShapeReference::ObjectIdNullableWithAggregatesFilter => "ObjectIdNullableWithAggregatesFilter".to_owned(),
        ShapeReference::StringWithAggregatesFilter => "StringWithAggregatesFilter".to_owned(),
        ShapeReference::StringNullableWithAggregatesFilter => "StringNullableWithAggregatesFilter".to_owned(),
        ShapeReference::EnumWithAggregatesFilter(t) => format!("EnumWithAggregatesFilter{open_generics}{}{close_generics}", lookup.call(t.as_ref())?),
        ShapeReference::EnumNullableWithAggregatesFilter(t) => format!("EnumNullableWithAggregatesFilter{open_generics}{}{close_generics}", lookup.call(t.as_ref())?),
        ShapeReference::ArrayWithAggregatesFilter(t) => format!("ArrayWithAggregatesFilter{open_generics}{}{close_generics}", lookup.call(t.as_ref())?),
        ShapeReference::ArrayNullableWithAggregatesFilter(t) => format!("ArrayNullableWithAggregatesFilter{open_generics}{}{close_generics}", lookup.call(t.as_ref())?),
        ShapeReference::IntAtomicUpdateOperationInput => "IntAtomicUpdateOperationInput".to_owned(),
        ShapeReference::Int64AtomicUpdateOperationInput => "Int64AtomicUpdateOperationInput".to_owned(),
        ShapeReference::Float32AtomicUpdateOperationInput => "Float32AtomicUpdateOperationInput".to_owned(),
        ShapeReference::FloatAtomicUpdateOperationInput => "FloatAtomicUpdateOperationInput".to_owned(),
        ShapeReference::DecimalAtomicUpdateOperationInput => "DecimalAtomicUpdateOperationInput".to_owned(),
        ShapeReference::ArrayAtomicUpdateOperationInput(t) => format!("ArrayAtomicUpdateOperationInput{open_generics}{}{close_generics}", lookup.call(t.as_ref())?),
        ShapeReference::Args(_, path) => format!("{}Args", path.join(path_separator)),
        ShapeReference::FindManyArgs(_, path) => format!("{}FindManyArgs", path.join(path_separator)),
        ShapeReference::FindFirstArgs(_, path) => format!("{}FindFirstArgs", path.join(path_separator)),
        ShapeReference::FindUniqueArgs(_, path) => format!("{}FindUniqueArgs", path.join(path_separator)),
        ShapeReference::CreateArgs(_, path) => format!("{}CreateArgs", path.join(path_separator)),
        ShapeReference::UpdateArgs(_, path) => format!("{}UpdateArgs", path.join(path_separator)),
        ShapeReference::UpsertArgs(_, path) => format!("{}UpsertArgs", path.join(path_separator)),
        ShapeReference::CopyArgs(_, path) => format!("{}CopyArgs", path.join(path_separator)),
        ShapeReference::DeleteArgs(_, path) => format!("{}DeleteArgs", path.join(path_separator)),
        ShapeReference::CreateManyArgs(_, path) => format!("{}CreateManyArgs", path.join(path_separator)),
        ShapeReference::UpdateManyArgs(_, path) => format!("{}UpdateManyArgs", path.join(path_separator)),
        ShapeReference::CopyManyArgs(_, path) => format!("{}CopyManyArgs", path.join(path_separator)),
        ShapeReference::DeleteManyArgs(_, path) => format!("{}DeleteManyArgs", path.join(path_separator)),
        ShapeReference::CountArgs(_, path) => format!("{}CountArgs", path.join(path_separator)),
        ShapeReference::AggregateArgs(_, path) => format!("{}AggregateArgs", path.join(path_separator)),
        ShapeReference::GroupByArgs(_, path) => format!("{}GroupByArgs", path.join(path_separator)),
        ShapeReference::RelationFilter(_, path) => format!("{}RelationFilter", path.join(path_separator)),
        ShapeReference::ListRelationFilter(_, path) => format!("{}ListRelationFilter", path.join(path_separator)),
        ShapeReference::WhereInput(_, path) => format!("{}WhereInput", path.join(path_separator)),
        ShapeReference::WhereUniqueInput(_, path) => format!("{}WhereUniqueInput", path.join(path_separator)),
        ShapeReference::ScalarFieldEnum(_, path) => format!("{}ScalarFieldEnum", path.join(path_separator)),
        ShapeReference::ScalarWhereWithAggregatesInput(_, path) => format!("{}ScalarWhereWithAggregatesInput", path.join(path_separator)),
        ShapeReference::CountAggregateInputType(_, path) => format!("{}CountAggregateInputType", path.join(path_separator)),
        ShapeReference::SumAggregateInputType(_, path) => format!("{}SumAggregateInputType", path.join(path_separator)),
        ShapeReference::AvgAggregateInputType(_, path) => format!("{}AvgAggregateInputType", path.join(path_separator)),
        ShapeReference::MaxAggregateInputType(_, path) => format!("{}MaxAggregateInputType", path.join(path_separator)),
        ShapeReference::MinAggregateInputType(_, path) => format!("{}MinAggregateInputType", path.join(path_separator)),
        ShapeReference::CreateInput(_, path) => format!("{}CreateInput", path.join(path_separator)),
        ShapeReference::CreateInputWithout(_, path, without) => format!("{}CreateWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::CreateNestedOneInput(_, path) => format!("{}CreateNestedOneInput", path.join(path_separator)),
        ShapeReference::CreateNestedOneInputWithout(_, path, without) => format!("{}CreateNestedOneWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::CreateNestedManyInput(_, path) => format!("{}CreateNestedManyInput", path.join(path_separator)),
        ShapeReference::CreateNestedManyInputWithout(_, path, without) => format!("{}CreateNestedManyWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::UpdateInput(_, path) => format!("{}UpdateInput", path.join(path_separator)),
        ShapeReference::UpdateInputWithout(_, path, without) => format!("{}UpdateWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::UpdateNestedOneInput(_, path) => format!("{}UpdateNestedOneInput", path.join(path_separator)),
        ShapeReference::UpdateNestedOneInputWithout(_, path, without) => format!("{}UpdateNestedOneWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::UpdateNestedManyInput(_, path) => format!("{}UpdateNestedManyInput", path.join(path_separator)),
        ShapeReference::UpdateNestedManyInputWithout(_, path, without) => format!("{}UpdateNestedManyWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::ConnectOrCreateInput(_, path) => format!("{}ConnectOrCreateInput", path.join(path_separator)),
        ShapeReference::ConnectOrCreateInputWithout(_, path, without) => format!("{}ConnectOrCreateWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::UpdateWithWhereUniqueInput(_, path) => format!("{}UpdateWithWhereUniqueInput", path.join(path_separator)),
        ShapeReference::UpdateWithWhereUniqueInputWithout(_, path, without) => format!("{}UpdateWithWhereUniqueWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::UpsertWithWhereUniqueInput(_, path) => format!("{}UpsertWithWhereUniqueInput", path.join(path_separator)),
        ShapeReference::UpsertWithWhereUniqueInputWithout(_, path, without) => format!("{}UpsertWithWhereUniqueWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::UpdateManyWithWhereInput(_, path) => format!("{}UpdateManyWithWhereInput", path.join(path_separator)),
        ShapeReference::UpdateManyWithWhereInputWithout(_, path, without) => format!("{}UpdateManyWithWhereWithout{}Input", path.join(path_separator), without.to_pascal_case()),
        ShapeReference::Select(_, path) => format!("{}Select", path.join(path_separator)),
        ShapeReference::Include(_, path) => format!("{}Include", path.join(path_separator)),
        ShapeReference::OrderByInput(_, path) => format!("{}OrderByInput", path.join(path_separator)),
        ShapeReference::Result(_, path) => format!("{}Result", path.join(path_separator)),
        ShapeReference::CountAggregateResult(_, path) => format!("{}CountAggregateResult", path.join(path_separator)),
        ShapeReference::SumAggregateResult(_, path) => format!("{}SumAggregateResult", path.join(path_separator)),
        ShapeReference::AvgAggregateResult(_, path) => format!("{}AvgAggregateResult", path.join(path_separator)),
        ShapeReference::MinAggregateResult(_, path) => format!("{}MinAggregateResult", path.join(path_separator)),
        ShapeReference::MaxAggregateResult(_, path) => format!("{}MaxAggregateResult", path.join(path_separator)),
        ShapeReference::AggregateResult(_, path) => format!("{}AggregateResult", path.join(path_separator)),
        ShapeReference::GroupByResult(_, path) => format!("{}GroupByResult", path.join(path_separator)),
    })
}